# app/bot/handlers/personal_commands.py

import asyncio
from datetime import date, timedelta
from collections import defaultdict
from app.crud import crud_homework 
from aiogram import Router, F, types
from aiogram.filters import Command, CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from app.core.config import settings
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –∏–∑ –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞
from app.bot.utils import (
    get_week_dates, 
    format_date_with_russian_weekday, 
    split_long_message, 
    get_mini_app_keyboard
)

from app.db.session import AsyncSessionLocal
from app.crud import crud_user, crud_schedule, crud_chat
from app.models.schedule import Lesson
from app.models.user import User

router = Router()
# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
router.message.filter(F.chat.type == "private")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def filter_lessons_by_user_preferences(lessons: list[Lesson], user: User) -> list[Lesson]:
    """
    –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø ‚Ññ2. –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º.
    –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–∫—Ç–∏–≤—ã, –∑–∞—Ç–µ–º –ø–æ–¥–≥—Ä—É–ø–ø—ã.
    """
    
    # --- –≠–¢–ê–ü 1: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –≠–õ–ï–ö–¢–ò–í–ê–ú ---
    preferred_tutors = user.settings.get("preferred_tutors", {})
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã
    lessons_by_slot = defaultdict(list)
    for lesson in lessons:
        lessons_by_slot[lesson.time_slot].append(lesson)

    lessons_after_electives_filter = []
    for time_slot, slot_lessons in lessons_by_slot.items():
        # –ï—Å–ª–∏ –≤ —Å–ª–æ—Ç–µ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ, –æ–Ω–æ –Ω–µ —ç–ª–µ–∫—Ç–∏–≤, –±–µ—Ä–µ–º –µ–≥–æ.
        if len(slot_lessons) <= 1:
            lessons_after_electives_filter.extend(slot_lessons)
            continue

        # –ï—Å–ª–∏ –≤ —Å–ª–æ—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–∏–π, –∏—â–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ
        subject_name_key = slot_lessons[0].subject_name
        preferred_tutor_id = preferred_tutors.get(subject_name_key)

        if preferred_tutor_id:
            # –ò—â–µ–º –∑–∞–Ω—è—Ç–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
            found = False
            for lesson in slot_lessons:
                if lesson.tutor_id == preferred_tutor_id:
                    lessons_after_electives_filter.append(lesson)
                    found = True
                    break
            # –ï—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            if not found:
                lessons_after_electives_filter.extend(slot_lessons)
        else:
            # –ï—Å–ª–∏ –≤—ã–±–æ—Ä –Ω–µ —Å–¥–µ–ª–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            lessons_after_electives_filter.extend(slot_lessons)

    # --- –≠–¢–ê–ü 2: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –ü–û–î–ì–†–£–ü–ü–ï ---
    # –†–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–ø–∏—Å–∫–æ–º, —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ —ç–ª–µ–∫—Ç–∏–≤–∞–º.
    if not user.subgroup_number:
        # –ï—Å–ª–∏ –ø–æ–¥–≥—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ –∑–∞–Ω—è—Ç–∏—è
        final_lessons = [l for l in lessons_after_electives_filter if not l.subgroup_name]
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–≥—Ä—É–ø–ø–∞ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–µ + –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –Ω–∞—à–µ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã
        user_subgroup_str_part = f"/{user.subgroup_number}"
        final_lessons = [
            l for l in lessons_after_electives_filter 
            if not l.subgroup_name or user_subgroup_str_part in l.subgroup_name
        ]
        
    return sorted(final_lessons, key=lambda l: l.time_slot)


async def format_schedule_for_user(session: AsyncSession, lessons: list[Lesson]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏.
    """
    if not lessons:
        return "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç. –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞—Ç—å! üéâ\n"
    
    response_parts = []
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã, —á—Ç–æ–±—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    sorted_lessons = sorted(lessons, key=lambda l: l.time_slot)

    for lesson in sorted_lessons:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
        homework = await crud_homework.get_homework_by_lesson_id(session, lesson_id=lesson.source_id)
        homework_str = ""
        if homework:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –î–ó –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            content_preview = homework.content[:100] + "..." if len(homework.content) > 100 else homework.content
            homework_str = f"\n*–î–ó:* {content_preview}"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–≥—Ä—É–ø–ø–µ
        subgroup_info = ""
        if lesson.subgroup_name:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            subgroup_num = lesson.subgroup_name.split('/')[-1]
            subgroup_info = f" ({subgroup_num} –ø–æ–¥–≥—Ä—É–ø–ø–∞)"
        
        # –°–æ–±–∏—Ä–∞–µ–º –±–ª–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
        part = (
            f"*{lesson.time_slot} –ø–∞—Ä–∞* ({lesson.lesson_type}){subgroup_info}\n"
            f"_{lesson.subject_name}_\n"
            f"üë§ {lesson.tutor.name}\n"
            f"üìç –∞—É–¥. {lesson.auditory.name} ({lesson.auditory.building}–∫)"
            f"{homework_str}"
        )
        response_parts.append(part)
        
    return "\n\n".join(response_parts)


async def get_schedule_and_reply_for_day(message: types.Message, target_date: date):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –û–î–ò–ù –¥–µ–Ω—å."""
    async with AsyncSessionLocal() as session:
        user = await crud_user.get_user_by_telegram_id(session, telegram_id=message.from_user.id)
        if not user or not user.group_id:
            return await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É –≤ Mini App.", reply_markup=get_mini_app_keyboard())

        lessons = await crud_schedule.get_schedule_for_group_by_date(session, group_id=user.group_id, target_date=target_date)
        filtered_lessons = filter_lessons_by_user_preferences(lessons, user)
        response_text = await format_schedule_for_user(filtered_lessons)
        
        await message.answer(
            f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ *{format_date_with_russian_weekday(target_date)}*:\n\n{response_text}",
            parse_mode="Markdown",
            reply_markup=get_mini_app_keyboard()
        )


# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ---

@router.message(CommandStart())
async def command_start_handler(message: types.Message):
    """–•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start."""
    keyboard = get_mini_app_keyboard("–û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üöÄ")
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –û–º–ì–£.",
        reply_markup=keyboard
    )
    await command_help_handler(message, show_greeting=False)
    await asyncio.sleep(1)
    await suggest_group_setup(message)


@router.message(Command("help"))
async def command_help_handler(message: types.Message, show_greeting: bool = True):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    greeting = "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –û–º–ì–£. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n" if show_greeting else ""
    help_text = (
        f"‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n{greeting}"
        "**–õ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "*/start* - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "*/myday* - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
        "*/nextday* - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.\n"
        "*/myweek* - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é.\n\n"
        "–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å (—É–∫–∞–∂–∏ –≥—Ä—É–ø–ø—É) —á–µ—Ä–µ–∑ Mini App (–∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é /start)."
    )
    await message.answer(help_text, parse_mode="Markdown")


@router.message(Command("myday"))
async def get_my_schedule_today(message: types.Message):
    await get_schedule_and_reply_for_day(message, target_date=date.today())

@router.message(Command("nextday"))
async def get_my_schedule_tomorrow(message: types.Message):
    await get_schedule_and_reply_for_day(message, target_date=date.today() + timedelta(days=1))


@router.message(Command("myweek"))
async def get_my_schedule_week(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é."""
    async with AsyncSessionLocal() as session:
        user = await crud_user.get_user_by_telegram_id(session, telegram_id=message.from_user.id)
        if not user or not user.group_id:
            return await message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É –≤ Mini App.", reply_markup=get_mini_app_keyboard())

        today = date.today()
        start_of_week, end_of_week = get_week_dates(today)
        lessons_db = await crud_schedule.get_schedule_for_group_for_period(
            session, group_id=user.group_id, start_date=start_of_week, end_date=end_of_week
        )
        
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –í–°–ï –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–ø–æ–¥–≥—Ä—É–ø–ø–∞ + —ç–ª–µ–∫—Ç–∏–≤—ã)
        filtered_lessons = filter_lessons_by_user_preferences(lessons_db, user)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        
        if not filtered_lessons:
            return await message.answer("–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç (—Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤).", reply_markup=get_mini_app_keyboard())

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –£–ñ–ï –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
        schedule_by_day = defaultdict(list)
        for lesson in filtered_lessons:
            schedule_by_day[lesson.date].append(lesson)
        
        full_response = ""
        for day in sorted(schedule_by_day.keys()):
            day_str = format_date_with_russian_weekday(day)
            day_header = f"üóìÔ∏è *{day_str}*\n\n"
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            day_content = await format_schedule_for_user(session, schedule_by_day[day])
            full_response += day_header + day_content + "\n" + ("-"*20) + "\n\n"
        
        keyboard = get_mini_app_keyboard()
        message_parts = split_long_message(full_response)
        for i, part in enumerate(message_parts):
            if i == len(message_parts) - 1:
                await message.answer(part, parse_mode="Markdown", disable_web_page_preview=True, reply_markup=keyboard)
            else:
                await message.answer(part, parse_mode="Markdown", disable_web_page_preview=True)


# --- "–£–º–Ω—ã–µ" —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ Callbacks ---

async def suggest_group_setup(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä—É–ø–ø—É."""
    async with AsyncSessionLocal() as session:
        user = await crud_user.get_user_by_telegram_id(session, telegram_id=message.from_user.id)
        if not user or user.group_id:
            return

        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ —á–∞—Ç–æ–≤, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
        # user_chats = await crud_chat.get_user_chats_with_linked_group(session, user_id=user.telegram_id)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", web_app=types.WebAppInfo(url=settings.MINI_APP_URL))
        await message.answer(
            "–ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞. "
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!",
            reply_markup=builder.as_markup()
        )

@router.callback_query(F.data.startswith("set_group_"))
async def set_user_group_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä—É–ø–ø—ã."""
    group_id = int(callback.data.split("_")[2])
    async with AsyncSessionLocal() as session:
        user = await crud_user.set_user_group(session, user_id=callback.from_user.id, group_id=group_id)
    
    if user:
        await callback.message.edit_text(f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. ‚úÖ\n"
                                         f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /myday, /nextday –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    else:
        await callback.message.edit_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ Mini App.")
    await callback.answer()

@router.callback_query(F.data == "cancel_suggestion")
async def cancel_suggestion_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""
    await callback.message.delete()
    await callback.answer()

@router.message()
async def handle_unknown_messages(message: types.Message):
    """–õ–æ–≤–∏—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤."""
    await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. üòï\n–ò—Å–ø–æ–ª—å–∑—É–π /start –∏–ª–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")