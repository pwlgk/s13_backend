# app/bot/handlers/group_commands.py

from datetime import date, timedelta
from collections import defaultdict

from aiogram import Router, F, types
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –∏–∑ –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞
from app.bot.utils import (
    get_week_dates, 
    format_date_with_russian_weekday, 
    split_long_message
)

from app.db.session import AsyncSessionLocal
from app.crud import crud_chat, crud_schedule
from app.models.schedule import Lesson

router = Router()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def format_day_schedule_for_chat(lessons: list[Lesson]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤.
    –ù–µ –≤–∫–ª—é—á–∞–µ—Ç –î–ó –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.
    """
    if not lessons:
        return "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.\n"
    
    response_parts = []
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–∑ –ë–î –ø—Ä–∏—à–ª–æ –Ω–µ –ø–æ –ø–æ—Ä—è–¥–∫—É
    sorted_lessons = sorted(lessons, key=lambda l: l.time_slot)

    for lesson in sorted_lessons:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–≥—Ä—É–ø–ø–µ
        subgroup_info = ""
        if lesson.subgroup_name:
            subgroup_num = lesson.subgroup_name.split('/')[-1]
            subgroup_info = f" ({subgroup_num} –ø–æ–¥–≥—Ä—É–ø–ø–∞)"
        
        # –°–æ–±–∏—Ä–∞–µ–º –±–ª–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
        part = (
            f"*{lesson.time_slot} –ø–∞—Ä–∞* ({lesson.lesson_type}){subgroup_info}\n"
            f"_{lesson.subject_name}_\n"
            f"üë§ {lesson.tutor.name}\n"
            f"üìç –∞—É–¥. {lesson.auditory.name} ({lesson.auditory.building}–∫)"
        )
        response_parts.append(part)
        
    return "\n\n".join(response_parts)


async def get_schedule_and_reply(message: types.Message, start_date: date, end_date: date):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É."""
    async with AsyncSessionLocal() as session:
        chat = await crud_chat.get_chat_by_id(session, message.chat.id)
        
        if not chat or not chat.linked_group_id:
            return await message.reply(
                "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø–µ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π `/setgroup [–Ω–∞–∑–≤–∞–Ω–∏–µ]`."
            )

        lessons_db = await crud_schedule.get_schedule_for_group_for_period(
            session, group_id=chat.linked_group_id, start_date=start_date, end_date=end_date
        )
        
        if not lessons_db:
            if start_date == end_date:
                await message.reply(f"–ù–∞ {start_date.strftime('%d.%m.%Y')} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")
            else:
                await message.reply(f"–ù–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")
            return

        schedule_by_day = defaultdict(list)
        for lesson in lessons_db:
            schedule_by_day[lesson.date].append(lesson)
            
        full_response = ""
        for day in sorted(schedule_by_day.keys()):
            day_str = format_date_with_russian_weekday(day)
            day_header = f"üóìÔ∏è *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_str}*\n\n"
            day_content = format_day_schedule_for_chat(schedule_by_day[day])
            full_response += day_header + day_content + "\n" + ("-"*20) + "\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ë–ï–ó –ö–õ–ê–í–ò–ê–¢–£–†–´
        message_parts = split_long_message(full_response)
        for part in message_parts:
            await message.reply(part, parse_mode="Markdown", disable_web_page_preview=True)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Å –Ø–í–ù–´–ú —Ñ–∏–ª—å—Ç—Ä–æ–º —á–∞—Ç–∞ ---

@router.message(F.text.startswith("/groupinfo"), F.chat.type.in_({"group", "supergroup"}))
async def get_group_info(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –ø—Ä–∏–≤—è–∑–∞–Ω —á–∞—Ç."""
    async with AsyncSessionLocal() as session:
        chat = await crud_chat.get_chat_by_id(session, message.chat.id)
        if chat and chat.linked_group and chat.linked_group.name:
            await message.reply(f"–≠—Ç–æ—Ç —á–∞—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø–µ: **{chat.linked_group.name}**", parse_mode="Markdown")
        else:
            await message.reply("–≠—Ç–æ—Ç —á–∞—Ç –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø–µ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π `/setgroup [–Ω–∞–∑–≤–∞–Ω–∏–µ]`.")


@router.message(F.text.startswith("/today"), F.chat.type.in_({"group", "supergroup"}))
async def get_group_schedule_today(message: types.Message):
    """–û—Ç–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    today = date.today()
    await get_schedule_and_reply(message, start_date=today, end_date=today)


@router.message(F.text.startswith("/tomorrow"), F.chat.type.in_({"group", "supergroup"}))
async def get_group_schedule_tomorrow(message: types.Message):
    """–û—Ç–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞."""
    tomorrow = date.today() + timedelta(days=1)
    await get_schedule_and_reply(message, start_date=tomorrow, end_date=tomorrow)


@router.message(F.text.startswith("/week"), F.chat.type.in_({"group", "supergroup"}))
async def get_group_schedule_week(message: types.Message):
    """–û—Ç–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é."""
    today = date.today()
    start_of_week, end_of_week = get_week_dates(today)
    await get_schedule_and_reply(message, start_date=start_of_week, end_date=end_of_week)


@router.message(F.text.startswith("/nextweek"), F.chat.type.in_({"group", "supergroup"}))
async def get_group_schedule_next_week(message: types.Message):
    """–û—Ç–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é."""
    next_monday = date.today() + timedelta(days=(7 - date.today().weekday()))
    start_of_week, end_of_week = get_week_dates(next_monday)
    await get_schedule_and_reply(message, start_date=start_of_week, end_date=end_of_week)