# app/bot/utils.py

from typing import List
from aiogram import types
from datetime import date, timedelta
from app.core.config import settings
MAX_MESSAGE_LENGTH = 4096

def split_long_message(text: str) -> List[str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –ª–∏–º–∏—Ç Telegram.
    –ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–±–∏–≤–∞—Ç—å –ø–æ –¥–≤–æ–π–Ω–æ–º—É –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Ä–≤–∞—Ç—å –∞–±–∑–∞—Ü—ã.
    """
    if len(text) <= MAX_MESSAGE_LENGTH:
        return [text]

    parts = []
    current_part = ""
    blocks = text.split("-" * 20)

    for block in blocks:
        block_to_add = block.strip()
        if not block_to_add:
            continue
            
        if parts:
            block_to_add = ("-"*20) + "\n\n" + block_to_add
        
        if len(current_part) + len(block_to_add) <= MAX_MESSAGE_LENGTH:
            current_part += block_to_add
        else:
            parts.append(current_part.strip())
            current_part = block_to_add

    if current_part.strip():
        parts.append(current_part.strip())
        
    return parts


def get_mini_app_keyboard(button_text: str = "–û—Ç–∫—Ä—ã—Ç—å –≤ Mini App üì≤") -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App."""


    web_app_info = types.WebAppInfo(url=settings.MINI_APP_URL)
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=button_text, web_app=web_app_info)]
        ]
    )
    return keyboard


def format_date_with_russian_weekday(target_date: date) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π."""
    weekdays = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    day_name = weekdays[target_date.weekday()]
    return target_date.strftime(f'%d.%m.%Y, {day_name}')

def get_week_dates(target_date: date) -> tuple[date, date]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –¥–ª—è –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—Ö–æ–¥–∏—Ç target_date."""
    start_of_week = target_date - timedelta(days=target_date.weekday())
    end_of_week = start_of_week + timedelta(days=6)
    return start_of_week, end_of_week