# app/bot/notifier.py

import asyncio
import json
import logging
from typing import Dict, List
from collections import defaultdict
from datetime import date, timedelta, datetime

import redis.asyncio as redis
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError
from app.bot.handlers.personal_commands import filter_lessons_by_user_preferences

from app.core.config import settings
from app.db.session import AsyncSessionLocal
from app.crud.crud_user import get_users_by_group_id, get_all_active_users
from app.schemas.notifications import ScheduleChange
from app.core.queue import SCHEDULE_CHANGES_QUEUE, BROADCAST_QUEUE, CHAT_MESSAGES_QUEUE, REMINDERS_QUEUE

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger("Notifier")

# --- –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ---

def format_grouped_changes(changes: List[ScheduleChange]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ–¥–Ω–æ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    today = date.today()
    tomorrow = today + timedelta(days=1)
    
    parts = {"today": [], "tomorrow": [], "future": []}
    
    for change in sorted(changes, key=lambda c: datetime.strptime((c.lesson_after or c.lesson_before).date, "%d.%m.%Y")):
        lesson_info = change.lesson_after or change.lesson_before
        try:
            lesson_date = datetime.strptime(lesson_info.date, "%d.%m.%Y").date()
        except (ValueError, TypeError):
            continue

        change_line = ""
        l_info = lesson_info
        if change.change_type == "NEW":
            change_line = f"‚úÖ –ù–æ–≤–∞—è –ø–∞—Ä–∞ –≤ {l_info.time_slot}: {l_info.subject_name}"
        elif change.change_type == "CANCELLED":
            change_line = f"‚ùå –û—Ç–º–µ–Ω–∞ –ø–∞—Ä—ã –≤ {l_info.time_slot}: {l_info.subject_name}"
        elif change.change_type == "UPDATED":
            b, a = change.lesson_before, change.lesson_after
            change_line = f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∞ –ø–∞—Ä–∞ –≤ {b.time_slot}: {b.subject_name} -> {a.subject_name}"

        if lesson_date == today:
            parts["today"].append(change_line)
        elif lesson_date == tomorrow:
            parts["tomorrow"].append(change_line)
        else:
            parts["future"].append(f"*{l_info.date}*: {change_line}")

    message_text = "üîî **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!**\n\n"
    if parts["today"]:
        message_text += "üö® **–ù–∞ —Å–µ–≥–æ–¥–Ω—è:**\n" + "\n".join(parts["today"]) + "\n\n"
    if parts["tomorrow"]:
        message_text += "‚ùóÔ∏è **–ù–∞ –∑–∞–≤—Ç—Ä–∞:**\n" + "\n".join(parts["tomorrow"]) + "\n\n"
    if parts["future"]:
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
        unique_future = sorted(list(set(parts["future"])))
        message_text += "üóìÔ∏è **–ù–∞ –±—É–¥—É—â–µ–µ:**\n" + "\n".join(unique_future) + "\n\n"
        
    return message_text

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ---

async def handle_schedule_changes(bot: Bot, all_changes: List[ScheduleChange]):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—á–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π, –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç."""
    changes_by_group = defaultdict(list)
    for change in all_changes:
        changes_by_group[change.group_id].append(change)
        
    for group_id, group_changes in changes_by_group.items():
        message = format_grouped_changes(group_changes)
        
        async with AsyncSessionLocal() as session:
            users_to_notify = await get_users_by_group_id(session, group_id=group_id)
        if not users_to_notify: continue

        logger.info(f"Notifying {len(users_to_notify)} users in group {group_id} about {len(group_changes)} changes.")
        for user in users_to_notify:
            if user.settings and user.settings.get("notifications_enabled", False):
                try:
                    await bot.send_message(user.telegram_id, message, parse_mode=ParseMode.MARKDOWN)
                    await asyncio.sleep(0.1)
                except TelegramAPIError as e:
                    logger.error(f"Failed to send schedule update to user {user.telegram_id}: {e}")

async def handle_broadcast(bot: Bot, task: Dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç."""
    message, admin_id = task.get("message"), task.get("admin_id")
    if not message:
        if admin_id: await bot.send_message(admin_id, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    logger.info(f"Starting broadcast from admin {admin_id}...")
    async with AsyncSessionLocal() as session:
        all_users = await get_all_active_users(session)
    if not all_users:
        if admin_id: await bot.send_message(admin_id, "‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    success, fail = 0, 0
    for user in all_users:
        try:
            await bot.send_message(user.telegram_id, message)
            success += 1; await asyncio.sleep(0.1)
        except TelegramAPIError as e:
            fail += 1; logger.warning(f"Failed to send broadcast to {user.telegram_id}: {e}")
    
    logger.info(f"Broadcast finished. Sent: {success}, Failed: {fail}")
    if admin_id:
        report = (f"üìä **–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ**\n\n"
                  f"–¢–µ–∫—Å—Ç: *¬´{message[:1000].replace('*', '').replace('_', '')}¬ª*\n\n"
                  f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {fail}")
        await bot.send_message(admin_id, report, parse_mode=ParseMode.MARKDOWN)

async def handle_chat_message(bot: Bot, task: Dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç."""
    message, chat_id, admin_id = task.get("message"), task.get("chat_id"), task.get("admin_id")
    if not message or not chat_id:
        if admin_id: await bot.send_message(admin_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –∏–ª–∏ ID —á–∞—Ç–∞.")
        return

    logger.info(f"Sending message from admin {admin_id} to chat {chat_id}")
    try:
        await bot.send_message(chat_id=chat_id, text=message)
        if admin_id: await bot.send_message(admin_id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç `{chat_id}` —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", parse_mode="Markdown")
    except TelegramAPIError as e:
        logger.error(f"Failed to send message to chat {chat_id}: {e}")
        if admin_id: await bot.send_message(admin_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç `{chat_id}`.\n–ü—Ä–∏—á–∏–Ω–∞: `{e}`", parse_mode="Markdown")

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π ---
async def handle_lesson_reminder(bot: Bot, task: Dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏."""
    group_id = task.get("group_id")
    lesson_info = task.get("lesson")
    interval = task.get("interval")
    if not all([group_id, lesson_info, interval]):
        logger.warning(f"Reminder task received with missing data: {task}")
        return

    async with AsyncSessionLocal() as session:
        users = await get_users_by_group_id(session, group_id=group_id)
        
    for user in users:
        settings = user.settings or {}
        if settings.get("reminders_enabled") and settings.get("reminder_time") == interval:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–µ–Ω—É–∂–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è—Ö
            lesson_obj = type('Lesson', (), lesson_info)() # –°–æ–∑–¥–∞–µ–º "—É—Ç–∏–Ω—ã–π" –æ–±—ä–µ–∫—Ç Lesson –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
            filtered = filter_lessons_by_user_preferences([lesson_obj], user)
            
            if not filtered:
                logger.info(f"Skipping reminder for user {user.telegram_id} due to personal filters.")
                continue

            message = (f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**\n\n"
                       f"–ß–µ—Ä–µ–∑ *{interval} –º–∏–Ω—É—Ç* ({lesson_info['start_time']}) –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–Ω—è—Ç–∏–µ:\n\n"
                       f"_{lesson_info['subject_name']}_\n"
                       f"*{lesson_info['time_slot']} –ø–∞—Ä–∞* –≤ –∞—É–¥. *{lesson_info['auditory_name']}*")
            try:
                await bot.send_message(user.telegram_id, message, parse_mode="Markdown")
            except TelegramAPIError as e:
                logger.warning(f"Failed to send reminder to user {user.telegram_id}: {e}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π ---

async def process_queues(bot: Bot):
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ Redis –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–¥–∞—á–∏."""
    redis_client = redis.from_url("redis://localhost:6379/0", decode_responses=True)
    queues_to_listen = [SCHEDULE_CHANGES_QUEUE, BROADCAST_QUEUE, CHAT_MESSAGES_QUEUE, REMINDERS_QUEUE]
    logger.info(f"Notifier task started. Listening to queues: {queues_to_listen}")
    
    while True:
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–≥—Ä–µ—Å—Ç–∏ –ø–∞—á–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            tasks_json = await redis_client.lpop(SCHEDULE_CHANGES_QUEUE, 100)
            if tasks_json:
                all_changes = [ScheduleChange.model_validate_json(task) for task in tasks_json]
                if all_changes:
                    asyncio.create_task(handle_schedule_changes(bot, all_changes))

            # –ó–∞—Ç–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º —Å–ª—É—à–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ "–ø–æ-–æ–¥–Ω–æ–º—É"
            result = await redis_client.blpop([BROADCAST_QUEUE, CHAT_MESSAGES_QUEUE, REMINDERS_QUEUE], timeout=1)
            if not result: continue

            queue_name, task_json = result
            task_data = json.loads(task_json)

            logger.info(f"New task received from queue '{queue_name}'")
            if queue_name == BROADCAST_QUEUE:
                asyncio.create_task(handle_broadcast(bot, task_data))
            elif queue_name == CHAT_MESSAGES_QUEUE:
                asyncio.create_task(handle_chat_message(bot, task_data))
            elif queue_name == REMINDERS_QUEUE:
                asyncio.create_task(handle_lesson_reminder(bot, task_data))

        except asyncio.CancelledError:
            logger.info("Notifier task is shutting down.")
            break
        except (redis.RedisError, ConnectionRefusedError) as e:
            logger.error(f"Redis connection error: {e}. Reconnecting in 10 seconds...")
            await asyncio.sleep(10)
        except Exception as e:
            logger.error(f"Critical error in processing queues: {e}", exc_info=True)
            await asyncio.sleep(5)